// Example of uses of the new Array programming's features of Sigh
// 1D
var a: Int[] = [1, 3, 5, 7]
var b: Int[] = [2, 4, 6, 8]
var c: Int[] = a + b
print("Sum 1D : "+ c)
var c: Int[] = a * b
print("Multiplication 1D : "+ c)
var c: Int[] = a - b
print("Subtraction 1D : "+ c)
var c: Int[] = b / a
print("Division 1D : "+ c)

// Multiple dimensions with Int and Float
var a: Float[][][] = [[[15.0, 5.3], [14.0, 5.0, 7.0]], [[5.0, 17.0, 23.0] , [-4.0, -10.0, -17.0]]]
var b: Int[][][] = [[[18, 2], [4, 20, 7]], [[-3, 25, 10] , [0, 5, -20]]]
var c: Float[][][] = a + b
print("Sum 3D : "+ c)
var c: Float[][][] = a * b
print("Multiplication 3D : "+ c)
var c: Float[][][] = a - b
print("Subtraction 3D : "+ c)
var c: Float[][][] = b / a
print("Division 3D : "+ c)

// Matricial product
var mat1: Int[][] = [[1, 2, 3]]
var mat2: Float[][] = [[1.0], [2.0], [3.0]]
var result: Float[][] = mat1 @ mat2
print("Matricial product 1 : "+result)

var mat1: Float[][] = [[1.0, 3.5, 4.2], [2.0, 0.0, -7.8], [3.0, 1.3, -3.2]]
var mat2: Int[][] = [[6, 2, 3], [17, 14, 1], [1, -5, 0]]
var result: Float[][] = mat1 @ mat2
print("Matricial product 2 : "+result)

var a: Float[][] = [[-1, 1, 0], [15, -36, 789]] + [[3.2, -1.3658, 0.0], [1.0, 2.0, 3.0]]

// Empty arrays
var empty1: Int[] = []
var empty2: Int[][] = [[]]
var emptyResult1: Int[] = empty1 + []
var emptyResult2: Int[][] = empty2 + [[]]
print("Result : "+emptyResult1)
print("Result2 : "+emptyResult2)

var empty3: Int[][] = [[], [1, 2, 3], [4, 5, 6]]
var empty4: Int[][] = [[], [1, 2, 3], [4, 5, 6]]
var emptyResult: Int[][] = empty3 + empty4
print("Result : "+emptyResult)

var emptyF: Float[][][] = [[[1.3, 2.8],[]], [[], []]]
var emptyF2: Float[][][] = [[[1.7, 15.23],[]], [[], []]]
var resultF: Float[][][] = emptyF * emptyF2
print("resultF : " + resultF)

var IntAndFloat: Float[][][] = [[[], [1, 2, 3]], [[]]] * [[[], [-2.3, 5.6, 8.18]], [[]]]
print("Float and Int : " + IntAndFloat)

// Array returned by a function
fun arrayFun () : Int[][]
{
    return [[1], [2, 8], [3]] + [[14], [32, 2], [1]]
}

var testArr: Int[][] = arrayFun()
print("test"+testArr)


struct Pair {
    var a: Int
    var b: Int
}

var pairArray: Pair[] = [$Pair(1, 2), $Pair(10, -3)]
var sumStruct: Pair[] = pairArray + [$Pair(1, 2), $Pair(10, -3)]


